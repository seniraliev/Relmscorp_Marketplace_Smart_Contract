{
  "address": "0x97dAcE6942894d7E002C575e35Ab5e14aA093297",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__AlreadyListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__CollectionOwnerProceedsTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__MarketplaceProceedsTransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotApprovedForMarketPlace",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__NotListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__NotSignedByMarketplaceOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__PriceMustBeAboveZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "NftMarketPlace__PriceNotMet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NftMarketPlace__SellerProceedsTransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ItemCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemListed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "marketplaceFee",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "collectionFee",
          "type": "uint16"
        }
      ],
      "name": "ProceedsTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "collectionOwner",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "collectionFee",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyItem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getListing",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "seller",
              "type": "address"
            }
          ],
          "internalType": "struct NftMarketplace.Listing",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMarketplaceFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "listItem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "newFee",
          "type": "uint16"
        }
      ],
      "name": "setMarketplaceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateListing",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x86d4784596367e0669bd5ce4cf8b5b72fcba5002289293a7b1d4dcb6d108343a",
  "receipt": {
    "to": null,
    "from": "0xF08e7F5b358BC842F72d5A659914E2f958C8A31A",
    "contractAddress": "0x97dAcE6942894d7E002C575e35Ab5e14aA093297",
    "transactionIndex": 0,
    "gasUsed": "1225501",
    "logsBloom": "0x
    "blockHash": "0x89bf5dd35e451d9324a095a54701a69f8a4d3366dad8e754605d3ae194c5de8c",
    "transactionHash": "0x86d4784596367e0669bd5ce4cf8b5b72fcba5002289293a7b1d4dcb6d108343a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7542104,
        "transactionHash": "0x86d4784596367e0669bd5ce4cf8b5b72fcba5002289293a7b1d4dcb6d108343a",
        "address": "0x97dAcE6942894d7E002C575e35Ab5e14aA093297",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f08e7f5b358bc842f72d5a659914e2f958c8a31a"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x89bf5dd35e451d9324a095a54701a69f8a4d3366dad8e754605d3ae194c5de8c"
      }
    ],
    "blockNumber": 7542104,
    "cumulativeGasUsed": "1225501",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "94fd2eb2270225c0ea5076fd0af0ee3a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__AlreadyListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__CollectionOwnerProceedsTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__MarketplaceProceedsTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotApprovedForMarketPlace\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__NotListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__NotSignedByMarketplaceOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__PriceMustBeAboveZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NftMarketPlace__PriceNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NftMarketPlace__SellerProceedsTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ItemCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"marketplaceFee\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"collectionFee\",\"type\":\"uint16\"}],\"name\":\"ProceedsTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"collectionOwner\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"collectionFee\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"buyItem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"internalType\":\"struct NftMarketplace.Listing\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMarketplaceFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"listItem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"newFee\",\"type\":\"uint16\"}],\"name\":\"setMarketplaceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyItem(bytes,address,uint16,address,uint256)\":{\"details\":\"- Payable to be able to receive ETH - Should include nonReentrant modifier from Openzeppelin (avoid Reentrancy attack) - Should include isListed modifier - Should check if msg.value > price - Delete listing mapping (item is not listed anymore) - Transfer NFT (using OpenZeppeling safeTransferFrom function) - Send Ether to the user, marketplace owner and collection owner - Emit event\"},\"cancelListing(address,uint256)\":{\"details\":\"- Should include isListed modifier - Should include isOwner - Delete listing mapping (item is not listed anymore) - Emit event\"},\"listItem(address,uint256,uint256)\":{\"details\":\"- Should include notListed and isOwner modifiers - Should check that NFT price is >= 0, if not -> revert - Should check that contract address has approve on the NFT to be transfered, if not -> revert - Update mapping - Emit event\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateListing(address,uint256,uint256)\":{\"details\":\"- Should include nonReentrant modifier from Openzeppelin (avoid Reentrancy attack) - Should include isListed modifier - Should include isOwner - Update mapping - Emit event\"}},\"version\":1},\"userdoc\":{\"events\":{\"ItemListed(address,address,uint256,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"buyItem(bytes,address,uint16,address,uint256)\":{\"notice\":\"Function to buy an NFT\"},\"cancelListing(address,uint256)\":{\"notice\":\"Function cancel NFT sell listing\"},\"listItem(address,uint256,uint256)\":{\"notice\":\"Function to list an NFT on sell\"},\"updateListing(address,uint256,uint256)\":{\"notice\":\"Function update selling NFT price\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NftMarketplace.sol\":\"NftMarketplace\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/NftMarketplace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nerror NftMarketPlace__PriceMustBeAboveZero();\\nerror NftMarketPlace__NotApprovedForMarketPlace();\\nerror NftMarketPlace__NotOwner();\\nerror NftMarketPlace__AlreadyListed(address nftAddress, uint256 tokenId);\\nerror NftMarketPlace__NotListed(address nftAddress, uint256 tokenId);\\nerror NftMarketPlace__PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\\nerror NftMarketPlace__MarketplaceProceedsTransferFailed();\\nerror NftMarketPlace__CollectionOwnerProceedsTransferFailed();\\nerror NftMarketPlace__SellerProceedsTransferFailed();\\nerror NftMarketPlace__NotSignedByMarketplaceOwner();\\n\\ncontract NftMarketplace is ReentrancyGuard, Ownable {\\n  using ECDSA for bytes32;\\n\\n  /// @notice Types\\n  struct Listing {\\n    uint256 price;\\n    address seller;\\n  }\\n\\n  /// @notice NFT variables\\n  // marketplace fee (0 - 10000)\\n  uint16 private _fee = 250;\\n  // NFT Contract address -> NFT TokenID -> Listing\\n  mapping(address => mapping(uint256 => Listing)) private s_listings;\\n\\n  /// @notice Events\\n  event ItemListed(\\n    address indexed seller,\\n    address indexed nftAddress,\\n    uint256 indexed tokenId,\\n    uint256 price\\n  );\\n  event ItemCanceled(address indexed seller, address indexed nftAddress, uint256 indexed tokenId);\\n  event ItemBought(\\n    address indexed buyer,\\n    address indexed nftAddress,\\n    uint256 indexed tokenId,\\n    uint256 price\\n  );\\n  event ProceedsTransferred(address indexed seller, uint256 totalAmount, uint16 marketplaceFee, uint16 collectionFee);\\n\\n  /// @notice Modifiers\\n  modifier isOwner(\\n    address nftAddress,\\n    uint256 tokenId,\\n    address spender\\n  ) {\\n    IERC721 nft = IERC721(nftAddress);\\n    address owner = nft.ownerOf(tokenId);\\n    if (spender != owner) {\\n      revert NftMarketPlace__NotOwner();\\n    }\\n    _;\\n  }\\n\\n  modifier notListed(\\n    address nftAddress,\\n    uint256 tokenId,\\n    address owner\\n  ) {\\n    Listing memory listing = s_listings[nftAddress][tokenId];\\n    if (listing.price > 0) {\\n      revert NftMarketPlace__AlreadyListed(nftAddress, tokenId);\\n    }\\n    _;\\n  }\\n\\n  modifier isListed(address nftAddress, uint256 tokenId) {\\n    Listing memory listing = s_listings[nftAddress][tokenId];\\n    if (listing.price <= 0) {\\n      revert NftMarketPlace__NotListed(nftAddress, tokenId);\\n    }\\n    _;\\n  }\\n\\n  //////////////////////\\n  //  Main Functions //\\n  /////////////////////\\n\\n  /**\\n   * @notice Function to list an NFT on sell\\n   * @dev\\n   * - Should include notListed and isOwner modifiers\\n   * - Should check that NFT price is >= 0, if not -> revert\\n   * - Should check that contract address has approve on the NFT to be transfered, if not -> revert\\n   * - Update mapping\\n   * - Emit event\\n   */\\n  function listItem(\\n    address nftAddress,\\n    uint256 tokenId,\\n    uint256 price\\n  ) external notListed(nftAddress, tokenId, msg.sender) isOwner(nftAddress, tokenId, msg.sender) {\\n    if (price <= 0) {\\n      revert NftMarketPlace__PriceMustBeAboveZero();\\n    }\\n    IERC721 nft = IERC721(nftAddress);\\n    if (nft.getApproved(tokenId) != address(this)) {\\n      revert NftMarketPlace__NotApprovedForMarketPlace();\\n    }\\n    s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\\n    emit ItemListed(msg.sender, nftAddress, tokenId, price);\\n  }\\n\\n  /**\\n   * @notice Function to buy an NFT\\n   * @dev\\n   * - Payable to be able to receive ETH\\n   * - Should include nonReentrant modifier from Openzeppelin (avoid Reentrancy attack)\\n   * - Should include isListed modifier\\n   * - Should check if msg.value > price\\n   * - Delete listing mapping (item is not listed anymore)\\n   * - Transfer NFT (using OpenZeppeling safeTransferFrom function)\\n   * - Send Ether to the user, marketplace owner and collection owner\\n   * - Emit event\\n   */\\n  function buyItem(\\n    bytes calldata signature,\\n    address collectionOwner,\\n    uint16 collectionFee,\\n    address nftAddress,\\n    uint256 tokenId\\n  ) external payable nonReentrant isListed(nftAddress, tokenId) {\\n    Listing memory listedItem = s_listings[nftAddress][tokenId];\\n    if (msg.value < listedItem.price) {\\n      revert NftMarketPlace__PriceNotMet(nftAddress, tokenId, listedItem.price);\\n    }\\n    delete (s_listings[nftAddress][tokenId]);\\n    IERC721(nftAddress).safeTransferFrom(listedItem.seller, msg.sender, tokenId);\\n    transferProceeds(signature, collectionOwner, collectionFee, listedItem.seller, listedItem.price);\\n    emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);\\n  }\\n\\n  /**\\n   * @notice Function cancel NFT sell listing\\n   * @dev\\n   * - Should include isListed modifier\\n   * - Should include isOwner\\n   * - Delete listing mapping (item is not listed anymore)\\n   * - Emit event\\n   */\\n  function cancelListing(\\n    address nftAddress,\\n    uint256 tokenId\\n  ) external isOwner(nftAddress, tokenId, msg.sender) isListed(nftAddress, tokenId) {\\n    delete (s_listings[nftAddress][tokenId]);\\n    emit ItemCanceled(msg.sender, nftAddress, tokenId);\\n  }\\n\\n  /**\\n   * @notice Function update selling NFT price\\n   * @dev\\n   * - Should include nonReentrant modifier from Openzeppelin (avoid Reentrancy attack)\\n   * - Should include isListed modifier\\n   * - Should include isOwner\\n   * - Update mapping\\n   * - Emit event\\n   */\\n  function updateListing(\\n    address nftAddress,\\n    uint256 tokenId,\\n    uint256 newPrice\\n  ) external nonReentrant isOwner(nftAddress, tokenId, msg.sender) isListed(nftAddress, tokenId) {\\n    s_listings[nftAddress][tokenId].price = newPrice;\\n    emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\\n  }\\n\\n  /**\\n   * @notice Function to transfer proceeds\\n   * @dev\\n   * - Should verify marketplace owner, if not -> revert\\n   * - Calculate transfer amount\\n   * - Transfer funds to seller, marketplace owner and collection owner\\n   * - Check transfer is correctly done, if not -> revert\\n   */\\n  function transferProceeds(\\n    bytes calldata signature,\\n    address collectionOwner,\\n    uint16 collectionFee,\\n    address seller,\\n    uint256 price\\n  ) private {\\n    if (!verifyMarketplaceOwner(signature, collectionOwner, collectionFee)) {\\n      revert NftMarketPlace__NotSignedByMarketplaceOwner();\\n    }\\n    uint256 marketplaceProceeds = (price * _fee) / 10000;\\n    uint256 collectionOwnerProceeds = (price * collectionFee) / 10000;\\n    uint256 sellerProceeds = price - marketplaceProceeds - collectionOwnerProceeds;\\n    (bool successMarketplaceProceedsTransfer, ) = payable(owner()).call{value: marketplaceProceeds}(\\\"\\\");\\n    if (!successMarketplaceProceedsTransfer) {\\n      revert NftMarketPlace__MarketplaceProceedsTransferFailed();\\n    }\\n    (bool successCollecionOwnerProceedsTransfer, ) = payable(collectionOwner).call{value: collectionOwnerProceeds}(\\\"\\\");\\n    if (!successCollecionOwnerProceedsTransfer) {\\n      revert NftMarketPlace__CollectionOwnerProceedsTransferFailed();\\n    }\\n    (bool successSellerProceedsTransfer, ) = payable(seller).call{value: sellerProceeds}(\\\"\\\");\\n    if (!successSellerProceedsTransfer) {\\n      revert NftMarketPlace__SellerProceedsTransferFailed();\\n    }\\n    emit ProceedsTransferred(seller, price, _fee, collectionFee);\\n  }\\n\\n  /**\\n   * @notice Function to verify marketplace owner to get collection fee\\n   * @dev\\n   * - Should encode collection owner address, fee, buyer address\\n   * - Get message from ECDSA library\\n   * - Recover address\\n   * - Return boolean if same as owner() true, not false\\n   */\\n  function verifyMarketplaceOwner(\\n    bytes calldata signature,\\n    address collectionOwner,\\n    uint16 collectionFee\\n  ) private view returns (bool) {\\n    bytes32 hash = keccak256(abi.encodePacked(collectionOwner, collectionFee, msg.sender));\\n    bytes32 message = ECDSA.toEthSignedMessageHash(hash);\\n    address recoveredAddress = ECDSA.recover(message, signature);\\n    return (recoveredAddress == owner());\\n  }\\n\\n  //////////////////////\\n  //  Getter Functions //\\n  /////////////////////\\n\\n  function getListing(address nftAddress, uint256 tokenId) external view returns (Listing memory) {\\n    return s_listings[nftAddress][tokenId];\\n  }\\n\\n  function getMarketplaceFee() external view returns (uint16) {\\n    return _fee;\\n  }\\n\\n  //////////////////////\\n  //  Setter Functions //\\n  /////////////////////\\n\\n  function setMarketplaceFee(uint16 newFee) external onlyOwner {\\n    _fee = newFee;\\n  }\\n}\\n\",\"keccak256\":\"0xac8d1486a16f166d1ea09e1bd5a6a8a9d7fb34076f72332d3237dbf6cd784a77\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805461ffff60a01b1916607d60a11b17905534801561002457600080fd5b50600160005561003333610038565b61008a565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611461806100996000396000f3fe6080604052600436106100915760003560e01c806389bfd38f1161005957806389bfd38f146101a05780638da5cb5b146101c0578063b2ddee06146101e8578063f2fde38b14610208578063f772adf11461022857600080fd5b80630a45d4f41461009657806326a7b37b146100b8578063715018a6146100eb578063796bd8cf1461010057806388700d1c14610113575b600080fd5b3480156100a257600080fd5b506100b66100b1366004611226565b610248565b005b3480156100c457600080fd5b50600154600160a01b900461ffff1660405161ffff90911681526020015b60405180910390f35b3480156100f757600080fd5b506100b6610272565b6100b661010e36600461125d565b610286565b34801561011f57600080fd5b5061017c61012e36600461130c565b604080518082018252600080825260209182018190526001600160a01b0394851681526002825282812093815292815291819020815180830190925280548252600101549092169082015290565b60408051825181526020928301516001600160a01b031692810192909252016100e2565b3480156101ac57600080fd5b506100b66101bb366004611338565b61048b565b3480156101cc57600080fd5b506001546040516001600160a01b0390911681526020016100e2565b3480156101f457600080fd5b506100b661020336600461130c565b610766565b34801561021457600080fd5b506100b661022336600461136d565b6108fe565b34801561023457600080fd5b506100b6610243366004611338565b610977565b610250610b1c565b6001805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b61027a610b1c565b6102846000610b76565b565b61028e610bc8565b6001600160a01b0380831660009081526002602090815260408083208584528252918290208251808401909352805480845260019091015490931690820152839183919061030657604051630173285f60e51b81526001600160a01b0384166004820152602481018390526044015b60405180910390fd5b6001600160a01b038086166000908152600260209081526040808320888452825291829020825180840190935280548084526001909101549093169082015290341015610382578051604051632425ddb360e01b81526001600160a01b03881660048201526024810187905260448101919091526064016102fd565b6001600160a01b0386811660008181526002602090815260408083208a84528252808320928355600190920180546001600160a01b03191690558401519051632142170760e11b81529216600483015233602483015260448201879052906342842e0e90606401600060405180830381600087803b15801561040357600080fd5b505af1158015610417573d6000803e3d6000fd5b505050506104318a8a8a8a85602001518660000151610c22565b805160405190815285906001600160a01b0388169033907f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac1879060200160405180910390a4505050506104836001600055565b505050505050565b6001600160a01b0380841660009081526002602090815260408083208684528252918290208251808401909352805480845260019091015490931690820152849184913391156105005760405163fa1d424f60e01b81526001600160a01b0385166004820152602481018490526044016102fd565b6040516331a9108f60e11b81526004810187905287908790339083906000906001600160a01b03831690636352211e9060240160206040518083038186803b15801561054b57600080fd5b505afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610583919061138a565b9050806001600160a01b0316836001600160a01b0316146105b7576040516349731c3b60e01b815260040160405180910390fd5b60008a116105d8576040516301e6e2e760e01b815260040160405180910390fd5b60405163020604bf60e21b8152600481018c90528c9030906001600160a01b0383169063081812fc9060240160206040518083038186803b15801561061c57600080fd5b505afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610654919061138a565b6001600160a01b03161461067b57604051634a7c3fb960e11b815260040160405180910390fd5b60405180604001604052808c8152602001336001600160a01b0316815250600260008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050508b8d6001600160a01b0316336001600160a01b03167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e60405161074f91815260200190565b60405180910390a450505050505050505050505050565b6040516331a9108f60e11b81526004810182905282908290339083906000906001600160a01b03831690636352211e9060240160206040518083038186803b1580156107b157600080fd5b505afa1580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e9919061138a565b9050806001600160a01b0316836001600160a01b03161461081d576040516349731c3b60e01b815260040160405180910390fd5b6001600160a01b0380881660009081526002602090815260408083208a84528252918290208251808401909352805480845260019091015490931690820152889188919061089057604051630173285f60e51b81526001600160a01b0384166004820152602481018390526044016102fd565b6001600160a01b038a1660008181526002602090815260408083208d845290915280822082815560010180546001600160a01b0319169055518b929133917f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231589190a450505050505050505050565b610906610b1c565b6001600160a01b03811661096b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102fd565b61097481610b76565b50565b61097f610bc8565b6040516331a9108f60e11b81526004810183905283908390339083906000906001600160a01b03831690636352211e9060240160206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a02919061138a565b9050806001600160a01b0316836001600160a01b031614610a36576040516349731c3b60e01b815260040160405180910390fd5b6001600160a01b0380891660009081526002602090815260408083208b845282529182902082518084019093528054808452600190910154909316908201528991899190610aa957604051630173285f60e51b81526001600160a01b0384166004820152602481018390526044016102fd565b6001600160a01b038b1660008181526002602090815260408083208e84528252918290208c905590518b81528c929133917fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de4910160405180910390a45050505050505050610b176001600055565b505050565b6001546001600160a01b031633146102845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fd565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026000541415610c1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102fd565b6002600055565b610c2e86868686610e84565b610c4b57604051630573b5db60e11b815260040160405180910390fd5b60015460009061271090610c6a90600160a01b900461ffff16846113bd565b610c7491906113dc565b90506000612710610c8961ffff8716856113bd565b610c9391906113dc565b9050600081610ca284866113fe565b610cac91906113fe565b90506000610cc26001546001600160a01b031690565b6001600160a01b03168460405160006040518083038185875af1925050503d8060008114610d0c576040519150601f19603f3d011682016040523d82523d6000602084013e610d11565b606091505b5050905080610d335760405163019c09f560e31b815260040160405180910390fd5b6000886001600160a01b03168460405160006040518083038185875af1925050503d8060008114610d80576040519150601f19603f3d011682016040523d82523d6000602084013e610d85565b606091505b5050905080610da7576040516372a2856b60e11b815260040160405180910390fd5b6000876001600160a01b03168460405160006040518083038185875af1925050503d8060008114610df4576040519150601f19603f3d011682016040523d82523d6000602084013e610df9565b606091505b5050905080610e1b57604051632dd0202d60e21b815260040160405180910390fd5b6001546040805189815261ffff600160a01b90930483166020820152918b16908201526001600160a01b038916907fa9533a8cb48423f468d953b07ab68765b35fac55a0ca61a55ab5a3ba6e46acca9060600160405180910390a2505050505050505050505050565b60408051606084811b6bffffffffffffffffffffffff1990811660208085019190915260f086901b6001600160f01b03191660348501523390921b1660368301528251602a818403018152604a830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a333200000000606a84015260868084018290528451808503909101815260a69093019093528151910120600091906000610f668289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f9392505050565b9050610f7a6001546001600160a01b031690565b6001600160a01b03918216911614979650505050505050565b6000806000610fa28585610fb7565b91509150610faf81610ffd565b509392505050565b600080825160411415610fee5760208301516040840151606085015160001a610fe28782858561114b565b94509450505050610ff6565b506000905060025b9250929050565b600081600481111561101157611011611415565b141561101a5750565b600181600481111561102e5761102e611415565b141561107c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102fd565b600281600481111561109057611090611415565b14156110de5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102fd565b60038160048111156110f2576110f2611415565b14156109745760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102fd565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111825750600090506003611206565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111d6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111ff57600060019250925050611206565b9150600090505b94509492505050565b803561ffff8116811461122157600080fd5b919050565b60006020828403121561123857600080fd5b6112418261120f565b9392505050565b6001600160a01b038116811461097457600080fd5b60008060008060008060a0878903121561127657600080fd5b863567ffffffffffffffff8082111561128e57600080fd5b818901915089601f8301126112a257600080fd5b8135818111156112b157600080fd5b8a60208285010111156112c357600080fd5b602092830198509650508701356112d981611248565b93506112e76040880161120f565b925060608701356112f781611248565b80925050608087013590509295509295509295565b6000806040838503121561131f57600080fd5b823561132a81611248565b946020939093013593505050565b60008060006060848603121561134d57600080fd5b833561135881611248565b95602085013595506040909401359392505050565b60006020828403121561137f57600080fd5b813561124181611248565b60006020828403121561139c57600080fd5b815161124181611248565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156113d7576113d76113a7565b500290565b6000826113f957634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611410576114106113a7565b500390565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220dc584a56d5eb3ce6b758c32e1a5e3b6bca80f960453df70b44b644ded3cf744164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c806389bfd38f1161005957806389bfd38f146101a05780638da5cb5b146101c0578063b2ddee06146101e8578063f2fde38b14610208578063f772adf11461022857600080fd5b80630a45d4f41461009657806326a7b37b146100b8578063715018a6146100eb578063796bd8cf1461010057806388700d1c14610113575b600080fd5b3480156100a257600080fd5b506100b66100b1366004611226565b610248565b005b3480156100c457600080fd5b50600154600160a01b900461ffff1660405161ffff90911681526020015b60405180910390f35b3480156100f757600080fd5b506100b6610272565b6100b661010e36600461125d565b610286565b34801561011f57600080fd5b5061017c61012e36600461130c565b604080518082018252600080825260209182018190526001600160a01b0394851681526002825282812093815292815291819020815180830190925280548252600101549092169082015290565b60408051825181526020928301516001600160a01b031692810192909252016100e2565b3480156101ac57600080fd5b506100b66101bb366004611338565b61048b565b3480156101cc57600080fd5b506001546040516001600160a01b0390911681526020016100e2565b3480156101f457600080fd5b506100b661020336600461130c565b610766565b34801561021457600080fd5b506100b661022336600461136d565b6108fe565b34801561023457600080fd5b506100b6610243366004611338565b610977565b610250610b1c565b6001805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b61027a610b1c565b6102846000610b76565b565b61028e610bc8565b6001600160a01b0380831660009081526002602090815260408083208584528252918290208251808401909352805480845260019091015490931690820152839183919061030657604051630173285f60e51b81526001600160a01b0384166004820152602481018390526044015b60405180910390fd5b6001600160a01b038086166000908152600260209081526040808320888452825291829020825180840190935280548084526001909101549093169082015290341015610382578051604051632425ddb360e01b81526001600160a01b03881660048201526024810187905260448101919091526064016102fd565b6001600160a01b0386811660008181526002602090815260408083208a84528252808320928355600190920180546001600160a01b03191690558401519051632142170760e11b81529216600483015233602483015260448201879052906342842e0e90606401600060405180830381600087803b15801561040357600080fd5b505af1158015610417573d6000803e3d6000fd5b505050506104318a8a8a8a85602001518660000151610c22565b805160405190815285906001600160a01b0388169033907f263223b1dd81e51054a4e6f791d45a4a1ddb4aadcd93a2dfd892615c3fdac1879060200160405180910390a4505050506104836001600055565b505050505050565b6001600160a01b0380841660009081526002602090815260408083208684528252918290208251808401909352805480845260019091015490931690820152849184913391156105005760405163fa1d424f60e01b81526001600160a01b0385166004820152602481018490526044016102fd565b6040516331a9108f60e11b81526004810187905287908790339083906000906001600160a01b03831690636352211e9060240160206040518083038186803b15801561054b57600080fd5b505afa15801561055f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610583919061138a565b9050806001600160a01b0316836001600160a01b0316146105b7576040516349731c3b60e01b815260040160405180910390fd5b60008a116105d8576040516301e6e2e760e01b815260040160405180910390fd5b60405163020604bf60e21b8152600481018c90528c9030906001600160a01b0383169063081812fc9060240160206040518083038186803b15801561061c57600080fd5b505afa158015610630573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610654919061138a565b6001600160a01b03161461067b57604051634a7c3fb960e11b815260040160405180910390fd5b60405180604001604052808c8152602001336001600160a01b0316815250600260008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e81526020019081526020016000206000820151816000015560208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055509050508b8d6001600160a01b0316336001600160a01b03167fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de48e60405161074f91815260200190565b60405180910390a450505050505050505050505050565b6040516331a9108f60e11b81526004810182905282908290339083906000906001600160a01b03831690636352211e9060240160206040518083038186803b1580156107b157600080fd5b505afa1580156107c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e9919061138a565b9050806001600160a01b0316836001600160a01b03161461081d576040516349731c3b60e01b815260040160405180910390fd5b6001600160a01b0380881660009081526002602090815260408083208a84528252918290208251808401909352805480845260019091015490931690820152889188919061089057604051630173285f60e51b81526001600160a01b0384166004820152602481018390526044016102fd565b6001600160a01b038a1660008181526002602090815260408083208d845290915280822082815560010180546001600160a01b0319169055518b929133917f9ba1a3cb55ce8d63d072a886f94d2a744f50cddf82128e897d0661f5ec6231589190a450505050505050505050565b610906610b1c565b6001600160a01b03811661096b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102fd565b61097481610b76565b50565b61097f610bc8565b6040516331a9108f60e11b81526004810183905283908390339083906000906001600160a01b03831690636352211e9060240160206040518083038186803b1580156109ca57600080fd5b505afa1580156109de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a02919061138a565b9050806001600160a01b0316836001600160a01b031614610a36576040516349731c3b60e01b815260040160405180910390fd5b6001600160a01b0380891660009081526002602090815260408083208b845282529182902082518084019093528054808452600190910154909316908201528991899190610aa957604051630173285f60e51b81526001600160a01b0384166004820152602481018390526044016102fd565b6001600160a01b038b1660008181526002602090815260408083208e84528252918290208c905590518b81528c929133917fd547e933094f12a9159076970143ebe73234e64480317844b0dcb36117116de4910160405180910390a45050505050505050610b176001600055565b505050565b6001546001600160a01b031633146102845760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102fd565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60026000541415610c1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102fd565b6002600055565b610c2e86868686610e84565b610c4b57604051630573b5db60e11b815260040160405180910390fd5b60015460009061271090610c6a90600160a01b900461ffff16846113bd565b610c7491906113dc565b90506000612710610c8961ffff8716856113bd565b610c9391906113dc565b9050600081610ca284866113fe565b610cac91906113fe565b90506000610cc26001546001600160a01b031690565b6001600160a01b03168460405160006040518083038185875af1925050503d8060008114610d0c576040519150601f19603f3d011682016040523d82523d6000602084013e610d11565b606091505b5050905080610d335760405163019c09f560e31b815260040160405180910390fd5b6000886001600160a01b03168460405160006040518083038185875af1925050503d8060008114610d80576040519150601f19603f3d011682016040523d82523d6000602084013e610d85565b606091505b5050905080610da7576040516372a2856b60e11b815260040160405180910390fd5b6000876001600160a01b03168460405160006040518083038185875af1925050503d8060008114610df4576040519150601f19603f3d011682016040523d82523d6000602084013e610df9565b606091505b5050905080610e1b57604051632dd0202d60e21b815260040160405180910390fd5b6001546040805189815261ffff600160a01b90930483166020820152918b16908201526001600160a01b038916907fa9533a8cb48423f468d953b07ab68765b35fac55a0ca61a55ab5a3ba6e46acca9060600160405180910390a2505050505050505050505050565b60408051606084811b6bffffffffffffffffffffffff1990811660208085019190915260f086901b6001600160f01b03191660348501523390921b1660368301528251602a818403018152604a830184528051908201207f19457468657265756d205369676e6564204d6573736167653a0a333200000000606a84015260868084018290528451808503909101815260a69093019093528151910120600091906000610f668289898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f9392505050565b9050610f7a6001546001600160a01b031690565b6001600160a01b03918216911614979650505050505050565b6000806000610fa28585610fb7565b91509150610faf81610ffd565b509392505050565b600080825160411415610fee5760208301516040840151606085015160001a610fe28782858561114b565b94509450505050610ff6565b506000905060025b9250929050565b600081600481111561101157611011611415565b141561101a5750565b600181600481111561102e5761102e611415565b141561107c5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102fd565b600281600481111561109057611090611415565b14156110de5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102fd565b60038160048111156110f2576110f2611415565b14156109745760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102fd565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156111825750600090506003611206565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156111d6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166111ff57600060019250925050611206565b9150600090505b94509492505050565b803561ffff8116811461122157600080fd5b919050565b60006020828403121561123857600080fd5b6112418261120f565b9392505050565b6001600160a01b038116811461097457600080fd5b60008060008060008060a0878903121561127657600080fd5b863567ffffffffffffffff8082111561128e57600080fd5b818901915089601f8301126112a257600080fd5b8135818111156112b157600080fd5b8a60208285010111156112c357600080fd5b602092830198509650508701356112d981611248565b93506112e76040880161120f565b925060608701356112f781611248565b80925050608087013590509295509295509295565b6000806040838503121561131f57600080fd5b823561132a81611248565b946020939093013593505050565b60008060006060848603121561134d57600080fd5b833561135881611248565b95602085013595506040909401359392505050565b60006020828403121561137f57600080fd5b813561124181611248565b60006020828403121561139c57600080fd5b815161124181611248565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156113d7576113d76113a7565b500290565b6000826113f957634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611410576114106113a7565b500390565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220dc584a56d5eb3ce6b758c32e1a5e3b6bca80f960453df70b44b644ded3cf744164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buyItem(bytes,address,uint16,address,uint256)": {
        "details": "- Payable to be able to receive ETH - Should include nonReentrant modifier from Openzeppelin (avoid Reentrancy attack) - Should include isListed modifier - Should check if msg.value > price - Delete listing mapping (item is not listed anymore) - Transfer NFT (using OpenZeppeling safeTransferFrom function) - Send Ether to the user, marketplace owner and collection owner - Emit event"
      },
      "cancelListing(address,uint256)": {
        "details": "- Should include isListed modifier - Should include isOwner - Delete listing mapping (item is not listed anymore) - Emit event"
      },
      "listItem(address,uint256,uint256)": {
        "details": "- Should include notListed and isOwner modifiers - Should check that NFT price is >= 0, if not -> revert - Should check that contract address has approve on the NFT to be transfered, if not -> revert - Update mapping - Emit event"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateListing(address,uint256,uint256)": {
        "details": "- Should include nonReentrant modifier from Openzeppelin (avoid Reentrancy attack) - Should include isListed modifier - Should include isOwner - Update mapping - Emit event"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ItemListed(address,address,uint256,uint256)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "buyItem(bytes,address,uint16,address,uint256)": {
        "notice": "Function to buy an NFT"
      },
      "cancelListing(address,uint256)": {
        "notice": "Function cancel NFT sell listing"
      },
      "listItem(address,uint256,uint256)": {
        "notice": "Function to list an NFT on sell"
      },
      "updateListing(address,uint256,uint256)": {
        "notice": "Function update selling NFT price"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3117,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "_fee",
        "offset": 20,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 3124,
        "contract": "contracts/NftMarketplace.sol:NftMarketplace",
        "label": "s_listings",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)3113_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Listing)3113_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NftMarketplace.Listing))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Listing)3113_storage)"
      },
      "t_mapping(t_uint256,t_struct(Listing)3113_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NftMarketplace.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)3113_storage"
      },
      "t_struct(Listing)3113_storage": {
        "encoding": "inplace",
        "label": "struct NftMarketplace.Listing",
        "members": [
          {
            "astId": 3110,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "price",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3112,
            "contract": "contracts/NftMarketplace.sol:NftMarketplace",
            "label": "seller",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}